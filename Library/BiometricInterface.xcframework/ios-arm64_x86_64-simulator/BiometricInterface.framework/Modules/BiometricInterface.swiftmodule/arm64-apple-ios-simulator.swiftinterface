// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BiometricInterface
import BrandPayBase
import Foundation
import LocalAuthentication
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_inheritsConvenienceInitializers final public class GetBiometricAuthMethodsAppBridge : ObjectiveC.NSObject, BrandPayBase.AppBridgeType {
  @objc final public var name: Swift.String
  @objc final public let skipQuotes: Swift.Bool
  @objc override dynamic public init()
  @objc final public func handle(controller: BiometricInterface.GetBiometricAuthMethodsAppBridge.Controller, body: [Swift.String : Any], onSuccess: BiometricInterface.GetBiometricAuthMethodsAppBridge.SuccessHandler?, onError: BiometricInterface.GetBiometricAuthMethodsAppBridge.FailureHandler?)
  @objc final public func checkAllowDomainAndHandle(with controller: BiometricInterface.GetBiometricAuthMethodsAppBridge.Controller, message: WebKit.WKScriptMessage)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class HasBiometricAuthAppBridge : ObjectiveC.NSObject, BrandPayBase.AppBridgeType {
  @objc final public var name: Swift.String
  @objc final public let skipQuotes: Swift.Bool
  @objc override dynamic public init()
  @objc final public func handle(controller: BiometricInterface.HasBiometricAuthAppBridge.Controller, body: [Swift.String : Any], onSuccess: BiometricInterface.HasBiometricAuthAppBridge.SuccessHandler?, onError: BiometricInterface.HasBiometricAuthAppBridge.FailureHandler?)
  @objc final public func checkAllowDomainAndHandle(with controller: BiometricInterface.HasBiometricAuthAppBridge.Controller, message: WebKit.WKScriptMessage)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class RegisterBiometricAuthAppBridge : ObjectiveC.NSObject, BrandPayBase.AppBridgeType {
  @objc final public var name: Swift.String
  @objc final public let skipQuotes: Swift.Bool
  @objc override dynamic public init()
  @objc final public func handle(controller: BiometricInterface.RegisterBiometricAuthAppBridge.Controller, body: [Swift.String : Any], onSuccess: BiometricInterface.RegisterBiometricAuthAppBridge.SuccessHandler?, onError: BiometricInterface.RegisterBiometricAuthAppBridge.FailureHandler?)
  @objc final public func checkAllowDomainAndHandle(with controller: BiometricInterface.RegisterBiometricAuthAppBridge.Controller, message: WebKit.WKScriptMessage)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class UnregisterBiometricAuthAppBridge : ObjectiveC.NSObject, BrandPayBase.AppBridgeType {
  @objc final public var name: Swift.String
  @objc final public let skipQuotes: Swift.Bool
  @objc override dynamic public init()
  @objc final public func handle(controller: BiometricInterface.UnregisterBiometricAuthAppBridge.Controller, body: [Swift.String : Any], onSuccess: BiometricInterface.UnregisterBiometricAuthAppBridge.SuccessHandler?, onError: BiometricInterface.UnregisterBiometricAuthAppBridge.FailureHandler?)
  @objc final public func checkAllowDomainAndHandle(with controller: BiometricInterface.UnregisterBiometricAuthAppBridge.Controller, message: WebKit.WKScriptMessage)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class VerifyBiometricAuthAppBridge : ObjectiveC.NSObject, BrandPayBase.AppBridgeType {
  @objc final public var name: Swift.String
  @objc final public let skipQuotes: Swift.Bool
  @objc override dynamic public init()
  @objc final public func handle(controller: BiometricInterface.VerifyBiometricAuthAppBridge.Controller, body: [Swift.String : Any], onSuccess: BiometricInterface.VerifyBiometricAuthAppBridge.SuccessHandler?, onError: BiometricInterface.VerifyBiometricAuthAppBridge.FailureHandler?)
  @objc final public func checkAllowDomainAndHandle(with controller: BiometricInterface.VerifyBiometricAuthAppBridge.Controller, message: WebKit.WKScriptMessage)
  @objc deinit
}
public typealias PolicyDomainState = Foundation.Data
public enum BiometricError : Swift.Error, Foundation.LocalizedError {
  case canceled
  case failed
  case invalid
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public static func == (a: BiometricInterface.BiometricError, b: BiometricInterface.BiometricError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class BiometricAuthenticationService {
  public init()
  final public func authenticate(resultHandler: @escaping (Swift.Result<BiometricInterface.PolicyDomainState, Swift.Error>) -> Swift.Void)
  final public var biometricType: LocalAuthentication.LABiometryType {
    get
  }
  final public func prepareBioAuth() throws -> LocalAuthentication.LAContext
  @objc deinit
}
public enum BioAuthError : Swift.Error, Foundation.LocalizedError {
  case userCancel
  case userNeedPassword
  case bioAuthNotEnabled
  case bioAuthNeedReregister
  case unknown
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: BiometricInterface.BioAuthError, b: BiometricInterface.BioAuthError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class BiometricAuthenticationProvider {
  final public var biometricType: BrandPayBase.BiometricType {
    get
  }
  final public var isEnabled: Swift.Bool {
    get
  }
  final public func register(encryptedPassword: BrandPayBase.EncryptedString, resultHandler: @escaping (Swift.Result<BiometricInterface.PolicyDomainState, Swift.Error>) -> Swift.Void)
  final public func authenticate(resultHandler: @escaping (Swift.Result<BrandPayBase.EncryptedString, Swift.Error>) -> Swift.Void)
  final public func delete(resultHandler: @escaping (Swift.Result<Swift.Bool, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension BiometricInterface.BiometricError : Swift.Equatable {}
extension BiometricInterface.BiometricError : Swift.Hashable {}
extension BiometricInterface.BioAuthError : Swift.Equatable {}
extension BiometricInterface.BioAuthError : Swift.Hashable {}
